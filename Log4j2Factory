
import org.slf4j.ILoggerFactory;
import org.slf4j.Logger;
import org.slf4j.helpers.Util;
import org.slf4j.impl.StaticLoggerBinder;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.Enumeration;



@SuppressWarnings("Duplicates")
public class Log4j2Factory {

    private static final String STATIC_BINDER_PACKAGE = "org.slf4j.impl.StaticLoggerBinder";

    private static final String LOG4J2_PATH = System.getProperty("user.home) + File.separator
            + "3rdparty" + File.separator + "lib2";

    private static JarLoader loader = new JarLoader(new String[]{LOG4J2_PATH});

    private static final Object lock = new Object();

    private static ILoggerFactory loggerFactory;

    private Log4j2Factory() {
    }

    private static ILoggerFactory getILoggerFactory() {
        //防止加载了Logj1.x版本的StaticLoggerBinder
        if (null == loggerFactory) {
            synchronized (lock) {
                if (null == loggerFactory) {
                    try {
                        Class<?> staticLoggerBinderClass = loader.loadClass(STATIC_BINDER_PACKAGE);
                        if (staticLoggerBinderClass != null) {
                            Method getSingletonMethod = staticLoggerBinderClass.getMethod("getSingleton");
                            Object binder = getSingletonMethod.invoke(null);
                            Method getLoggerFactoryMethod = staticLoggerBinderClass.getMethod("getLoggerFactory");
                            loggerFactory = (ILoggerFactory) getLoggerFactoryMethod.invoke(binder);
                        }
                    } catch (Exception e) {
                        Util.report(e.getMessage());
                        loggerFactory = StaticLoggerBinder.getSingleton().getLoggerFactory();
                    }
                }

            }
        }
        return loggerFactory;
    }

    public static Logger getLogger(String name) {
        ClassLoader currentLoader = Thread.currentThread().getContextClassLoader();
        //设置当前线程的上下文类加载器,用于加载log4j2相关class
        if (loader != null) {
            Thread.currentThread().setContextClassLoader(loader);
        }
        ILoggerFactory iLoggerFactory = getILoggerFactory();
        Logger logger = iLoggerFactory.getLogger(name);
        //恢复线程上下文类加载器
        Thread.currentThread().setContextClassLoader(currentLoader);
        return logger;
    }

    public static Logger getLogger(Class<?> clazz) {
        return getLogger(clazz.getName());
    }

}
